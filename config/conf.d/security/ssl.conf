# https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
# https://nginx.org/en/docs/http/ngx_http_ssl_module.html

ssl_protocols TLSv1.2 TLSv1.3;

# https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache
# The number is the cache size in MB
ssl_session_cache shared:SSL:10m;

ssl_session_timeout 1d;

# ssl_certificate /certbot/live/<your_project>/fullchain.pem;
# ssl_certificate_key /certbot/live/<your_project>/privkey.pem;

# Configuration is based on
# https://cipherli.st/
# https://wiki.mozilla.org/Security/Server_Side_TLS
# When using only secure ciphers we can let the client choose the cipher with the best performance
# ssl_prefer_server_ciphers on;
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:EECDH+AESGCM;
# The NIST curves (prime256v1, secp384r1, secp521r1) may be vulnerable but are required to support many browsers
# https://safecurves.cr.yp.to/
ssl_ecdh_curve secp384r1;

# OCSP stapling
# The resolver config is added to prevent the warning
# "no resolver defined to resolve ocsp.int-x3.letsencrypt.org while requesting certificate status"
# https://community.letsencrypt.org/t/no-resolver-defined-to-resolve-ocsp-int-x3-letsencrypt-org-while-requesting-certificate-status-responder-ocsp-int-x3-letsencrypt-org/21427
# https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
resolver 127.0.0.11;
ssl_stapling on;
ssl_stapling_verify on;

# HSTS for 6 months (use initially a smaller value for testing)
# add_header Strict-Transport-Security "max-age=15768000" always;
# HSTS for 1 week
add_header Strict-Transport-Security "max-age=604800" always;
